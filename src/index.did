type Course = record {
    id: text;
    creatorAddress: text;
    creatorName: text;
    title: text;
    content: text;
    attachmentURL: text;
    category: text;
    keyword: text;
    contact: text;
    createdAt: int;
    updatedAt: opt int;
};

type FilterPayload = record {
    creatorName: opt text;
    category: opt text;
    keyword: opt text;
};

type Result_Ok<T> = variant { Ok: T };
type Result_Err<E> = variant { Err: E };
type Result<T, E> = variant { Ok: T; Err: E };

service : {
    // Course Management
    "create_course": (Course) -> (Result<Course, text>);
    "get_courses": () -> (Result<vec Course, text>) query;
    "get_course": (text) -> (Result<Course, text>) query;
    "update_course": (text, Course) -> (Result<Course, text>);
    "delete_course": (text) -> (Result<Course, text>);
    "delete_all_courses": () -> (Result<vec text, text>);
    "delete_courses_by_address": (text) -> (Result<vec text, text>);
    "filter_courses_and": (FilterPayload) -> (Result<vec Course, text>) query;
    "filter_courses_or": (FilterPayload) -> (Result<vec Course, text>) query;

    // Administrative Functions
    "get_admin": () -> (Result<vec text, text>) query;
    "set_admin": (text) -> (Result<text, text>);
    "get_moderators": () -> (Result<vec text, text>) query;
    "add_moderator": (text) -> (Result<text, text>);
    "remove_moderator": (text) -> (Result<text, text>);
    "ban_user": (text) -> (Result<text, text>);
    "unban_user": (text) -> (Result<text, text>);
    
    // HTTP Functions
    http_request: (record {
        url: text;
        method: text;
        body: vec nat8;
        headers: vec record {text; text};
        certificate_version: opt nat16
    }) -> (record {
        body: vec nat8;
        headers: vec record {text; text};
        upgrade: opt bool;
        streaming_strategy: opt variant {
            Callback: record {
                token: vec nat8;
                callback: func (vec nat8) -> (opt record {
                    token: opt vec nat8;
                    body: vec nat8
                }) query
            }
        };
        status_code: nat16
    }) query;
    
    http_request_update: (record {
        url: text;
        method: text;
        body: vec nat8;
        headers: vec record {text; text}
    }) -> (record {
        body: vec nat8;
        headers: vec record {text; text};
        upgrade: opt bool;
        streaming_strategy: opt variant {
            Callback: record {
                token: vec nat8;
                callback: func (vec nat8) -> (opt record {
                    token: opt vec nat8;
                    body: vec nat8
                }) query
            }
        };
        status_code: nat16
    });
}
